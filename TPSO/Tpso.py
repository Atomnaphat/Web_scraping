import requests
from datetime import datetime, timedelta, timezone
from pymongo import MongoClient
from dotenv import load_dotenv
import os

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
load_dotenv()

# ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ URI ‡πÅ‡∏•‡∏∞ DB name ‡∏à‡∏≤‡∏Å environment
MONGO_URI = os.getenv('MONGO_URI', 'mongodb://localhost:27017')
DB_NAME = os.getenv('DB_NAME', 'TPSO_logs')

def get_database():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô database object ‡∏à‡∏≤‡∏Å MongoDB
    """
    try:
        client = MongoClient(MONGO_URI)
        db = client[DB_NAME]
        return db
    except Exception as e:
        print(f"‚ùå Error connecting to MongoDB: {e}")
        return None

def store_price_data(data, collection_name=None):
    """
    ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô MongoDB
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á insert_one (dict) ‡πÅ‡∏•‡∏∞ insert_many (list of dicts)
    ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á collection ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    """
    try:
        db = get_database()
        if db is None:
            return False

        # ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (UTC+7)
        thailand_time = datetime.now(timezone(timedelta(hours=7)))

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ collection ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ collection
        if not collection_name:
            # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á-‡∏ô‡∏≤‡∏ó‡∏µ)
            collection_name = thailand_time.strftime("TPSO_Data_%d-%m-%Y-%H-%M")

        collection = db[collection_name]

        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if isinstance(data, list):
            if not data:
                print("‚ö†Ô∏è No data to insert.")
                return False
            result = collection.insert_many(data)
            print(f"‚úÖ Inserted {len(result.inserted_ids)} documents into '{collection_name}'")
        else:
            result = collection.insert_one(data)
            print(f"‚úÖ Inserted 1 document with ID: {result.inserted_id} into '{collection_name}'")

        return True
    except Exception as e:
        print(f"‚ùå Error storing data in MongoDB: {e}")
        return False

def fetch_and_store_data():
    url = "https://index-api.tpso.go.th/api/cmip/filter"

    # Modify data to allow dynamic period for current year
    current_year = datetime.now().year + 543  # Thai Buddhist calendar (current year + 543)
    current_month = datetime.now().month

    data = {
        "YearBase": 2558,
        "Categories": [],
        "HeadCategories": [
            "checkAll", "01", "02", "03", "04", "05", "06", "07", "08", "09",
            "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21"
        ],
        "Period": {
            "StartYear": str(current_year),
            "StartMonth": 1,
            "EndYear": str(current_year),
            "EndMonth": current_month
        },
        "Search": "",
        "TimeOption": True,
        "Types": ["14"]
    }

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
    }

    try:
        response = requests.post(url, json=data, headers=headers, timeout=30)
        response.raise_for_status()  # Will raise an exception for HTTP error codes
    except requests.exceptions.Timeout:
        print("‚è∞ Request timed out, please try again later.")
        return
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Request failed: {e}")
        return

    print("‚úÖ Success! Fetching data...")

    try:
        response_data = response.json()
    except ValueError as e:
        print(f"‚ùå Failed to parse JSON response: {e}")
        return

    thailand_time = datetime.now(timezone(timedelta(hours=7)))
    date_str = thailand_time.strftime('%d-%m-%Y-%H-%M')

    documents = [{
        "item": item,
        "timestamp": thailand_time,
        "request_parameters": data
    } for item in response_data]

    # Try storing in MongoDB
    if store_price_data(documents, collection_name=f"TPSO_Data_{date_str}"):
        print(f"‚úÖ Stored {len(documents)} documents in MongoDB")
        print(f"üìå Current Thailand time: {thailand_time.strftime('%Y-%m-%d %H:%M:%S')} TH")
    else:
        print("‚ùå Failed to store data in MongoDB")

if __name__ == "__main__":
    print("üöÄ Starting data fetch...")
    fetch_and_store_data()
    print("‚úÖ Program completed")
